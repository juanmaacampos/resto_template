#!/bin/bash

# üîç Script de Verificaci√≥n - MercadoPago + Google Cloud Setup
# Verifica que toda la configuraci√≥n est√© correcta

echo "üîç Verificando configuraci√≥n de MercadoPago + Google Cloud..."
echo ""

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuraci√≥n
PROJECT_ID="cms-menu-7b4a4"
BUSINESS_ID="GLxQFeNBaXO7PFyYnTFlooFgJNl2"
SECRET_PREFIX="SHOP_TEMPLATE_MP_"
SECRET_NAME_BUSINESS="${SECRET_PREFIX}ACCESS_TOKEN_${BUSINESS_ID}"
SECRET_NAME_GENERAL="${SECRET_PREFIX}ACCESS_TOKEN_GENERAL"

errors=0
warnings=0

echo -e "${BLUE}üìã Verificando configuraci√≥n para:${NC}"
echo "   ‚Ä¢ Proyecto: $PROJECT_ID"
echo "   ‚Ä¢ Business ID: $BUSINESS_ID"
echo ""

# 1. Verificar Google Cloud CLI
echo -e "${YELLOW}üîç 1. Verificando Google Cloud CLI...${NC}"
if command -v gcloud >/dev/null 2>&1; then
    echo -e "${GREEN}   ‚úÖ Google Cloud CLI est√° instalado${NC}"
    
    # Verificar autenticaci√≥n
    CURRENT_PROJECT=$(gcloud config get-value project 2>/dev/null)
    if [ "$CURRENT_PROJECT" = "$PROJECT_ID" ]; then
        echo -e "${GREEN}   ‚úÖ Proyecto configurado correctamente: $CURRENT_PROJECT${NC}"
    else
        echo -e "${RED}   ‚ùå Proyecto incorrecto. Actual: $CURRENT_PROJECT, Esperado: $PROJECT_ID${NC}"
        ((errors++))
    fi
else
    echo -e "${RED}   ‚ùå Google Cloud CLI no est√° instalado${NC}"
    ((errors++))
fi
echo ""

# 2. Verificar APIs habilitadas
echo -e "${YELLOW}üîç 2. Verificando APIs habilitadas...${NC}"
if gcloud services list --enabled --filter="name:secretmanager.googleapis.com" --format="value(name)" | grep -q secretmanager; then
    echo -e "${GREEN}   ‚úÖ Secret Manager API habilitada${NC}"
else
    echo -e "${RED}   ‚ùå Secret Manager API no habilitada${NC}"
    ((errors++))
fi

if gcloud services list --enabled --filter="name:cloudfunctions.googleapis.com" --format="value(name)" | grep -q cloudfunctions; then
    echo -e "${GREEN}   ‚úÖ Cloud Functions API habilitada${NC}"
else
    echo -e "${RED}   ‚ùå Cloud Functions API no habilitada${NC}"
    ((errors++))
fi
echo ""

# 3. Verificar Secrets
echo -e "${YELLOW}üîç 3. Verificando Secrets en Secret Manager...${NC}"

# Secret espec√≠fico del business
if gcloud secrets describe $SECRET_NAME_BUSINESS >/dev/null 2>&1; then
    echo -e "${GREEN}   ‚úÖ Secret business existe: $SECRET_NAME_BUSINESS${NC}"
    
    # Verificar permisos
    if gcloud secrets get-iam-policy $SECRET_NAME_BUSINESS --flatten="bindings[].members[]" --format="table(bindings.role)" --filter="bindings.members:cms-menu-7b4a4@appspot.gserviceaccount.com" | grep -q secretmanager.secretAccessor; then
        echo -e "${GREEN}   ‚úÖ Permisos configurados para secret business${NC}"
    else
        echo -e "${RED}   ‚ùå Faltan permisos para secret business${NC}"
        ((errors++))
    fi
else
    echo -e "${RED}   ‚ùå Secret business no existe: $SECRET_NAME_BUSINESS${NC}"
    ((errors++))
fi

# Secret general
if gcloud secrets describe $SECRET_NAME_GENERAL >/dev/null 2>&1; then
    echo -e "${GREEN}   ‚úÖ Secret general existe: $SECRET_NAME_GENERAL${NC}"
    
    # Verificar permisos
    if gcloud secrets get-iam-policy $SECRET_NAME_GENERAL --flatten="bindings[].members[]" --format="table(bindings.role)" --filter="bindings.members:cms-menu-7b4a4@appspot.gserviceaccount.com" | grep -q secretmanager.secretAccessor; then
        echo -e "${GREEN}   ‚úÖ Permisos configurados para secret general${NC}"
    else
        echo -e "${RED}   ‚ùå Faltan permisos para secret general${NC}"
        ((errors++))
    fi
else
    echo -e "${YELLOW}   ‚ö†Ô∏è Secret general no existe: $SECRET_NAME_GENERAL${NC}"
    ((warnings++))
fi
echo ""

# 4. Verificar Cloud Functions
echo -e "${YELLOW}üîç 4. Verificando Cloud Functions...${NC}"

# Verificar si las functions est√°n desplegadas
if gcloud functions describe createMercadoPagoPreference --region=us-central1 >/dev/null 2>&1; then
    echo -e "${GREEN}   ‚úÖ Cloud Function 'createMercadoPagoPreference' desplegada${NC}"
else
    echo -e "${RED}   ‚ùå Cloud Function 'createMercadoPagoPreference' no encontrada${NC}"
    ((errors++))
fi

if gcloud functions describe mercadoPagoWebhookV2 --region=us-central1 >/dev/null 2>&1; then
    echo -e "${GREEN}   ‚úÖ Cloud Function 'mercadoPagoWebhookV2' desplegada${NC}"
else
    echo -e "${RED}   ‚ùå Cloud Function 'mercadoPagoWebhookV2' no encontrada${NC}"
    ((errors++))
fi

if gcloud functions describe createMercadoPagoPreferenceHTTP --region=us-central1 >/dev/null 2>&1; then
    echo -e "${GREEN}   ‚úÖ Cloud Function 'createMercadoPagoPreferenceHTTP' desplegada${NC}"
else
    echo -e "${YELLOW}   ‚ö†Ô∏è Cloud Function 'createMercadoPagoPreferenceHTTP' no encontrada${NC}"
    ((warnings++))
fi
echo ""

# 5. Verificar archivo config.js
echo -e "${YELLOW}üîç 5. Verificando configuraci√≥n local...${NC}"

if [ -f "src/cms-menu/config.js" ]; then
    echo -e "${GREEN}   ‚úÖ Archivo config.js encontrado${NC}"
    
    # Verificar que no tenga placeholders
    if grep -q "YOUR_" src/cms-menu/config.js; then
        echo -e "${RED}   ‚ùå config.js contiene placeholders sin configurar${NC}"
        ((errors++))
    else
        echo -e "${GREEN}   ‚úÖ config.js parece estar configurado correctamente${NC}"
    fi
    
    # Verificar Business ID
    if grep -q "$BUSINESS_ID" src/cms-menu/config.js; then
        echo -e "${GREEN}   ‚úÖ Business ID correcto en config.js${NC}"
    else
        echo -e "${RED}   ‚ùå Business ID no coincide en config.js${NC}"
        ((errors++))
    fi
else
    echo -e "${RED}   ‚ùå Archivo config.js no encontrado${NC}"
    ((errors++))
fi
echo ""

# 6. Verificar Firebase
echo -e "${YELLOW}üîç 6. Verificando Firebase...${NC}"

if command -v firebase >/dev/null 2>&1; then
    echo -e "${GREEN}   ‚úÖ Firebase CLI est√° instalado${NC}"
else
    echo -e "${RED}   ‚ùå Firebase CLI no est√° instalado${NC}"
    ((errors++))
fi

if [ -f "firebase.json" ]; then
    echo -e "${GREEN}   ‚úÖ firebase.json encontrado${NC}"
else
    echo -e "${RED}   ‚ùå firebase.json no encontrado${NC}"
    ((errors++))
fi

if [ -f "functions/package.json" ]; then
    echo -e "${GREEN}   ‚úÖ functions/package.json encontrado${NC}"
else
    echo -e "${RED}   ‚ùå functions/package.json no encontrado${NC}"
    ((errors++))
fi
echo ""

# Resumen final
echo "üìä RESUMEN DE VERIFICACI√ìN"
echo "=========================="

if [ $errors -eq 0 ]; then
    echo -e "${GREEN}üéâ ¬°TODO CONFIGURADO CORRECTAMENTE!${NC}"
    echo ""
    echo -e "${GREEN}‚úÖ Tu sistema de pagos est√° listo para funcionar${NC}"
    echo ""
    echo -e "${BLUE}üöÄ Pr√≥ximos pasos:${NC}"
    echo "   1. Probar un pago en tu aplicaci√≥n"
    echo "   2. Verificar que funciona el checkout"
    echo "   3. Revisar logs si hay problemas: firebase functions:log"
else
    echo -e "${RED}‚ùå SE ENCONTRARON $errors ERRORES${NC}"
    echo ""
    echo -e "${YELLOW}üîß Para corregir los errores:${NC}"
    echo "   1. Ejecuta: ./setup-mercadopago-secrets.sh"
    echo "   2. O sigue la gu√≠a manual en: GUIA_GOOGLE_CLOUD_SETUP.md"
fi

if [ $warnings -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è $warnings advertencias (no cr√≠ticas)${NC}"
fi

echo ""
echo -e "${BLUE}üîó Enlaces √∫tiles:${NC}"
echo "   ‚Ä¢ Secret Manager: https://console.cloud.google.com/security/secret-manager?project=$PROJECT_ID"
echo "   ‚Ä¢ Cloud Functions: https://console.cloud.google.com/functions/list?project=$PROJECT_ID"
echo "   ‚Ä¢ Firebase Console: https://console.firebase.google.com/project/$PROJECT_ID"
echo ""

exit $errors
